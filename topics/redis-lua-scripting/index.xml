<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Redis Lua Scripting on saidie&#39;s log</title>
    <link>https://saidie.github.io/topics/redis-lua-scripting/index.xml</link>
    <description>Recent content in Redis Lua Scripting on saidie&#39;s log</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>Hiroshi Saito &amp;copy; 2016. All rights reserved.</copyright>
    <atom:link href="https://saidie.github.io/topics/redis-lua-scripting/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Dijkstra&#39;s algorithm by Redis and Lua (2 of 2)</title>
      <link>https://saidie.github.io/post/dijkstra_algorithm_by_redis_and_lua_part2/</link>
      <pubDate>Tue, 29 Dec 2015 01:30:53 +0900</pubDate>
      
      <guid>https://saidie.github.io/post/dijkstra_algorithm_by_redis_and_lua_part2/</guid>
      <description>

&lt;p&gt;In &lt;a href=&#34;https://saidie.github.io/post/dijkstra_algorithm_by_redis_and_lua_part1&#34;&gt;the previous post&lt;/a&gt;, a brief description about running Lua script on Redis and a code snippet to add a graph edge to a hash are given. In this post, an implementation of the Dijkstra&amp;rsquo;s shortest path algorithm is explained.
I will not explain the algorithm itself since there are already so many articles explaining about it, e.g., &lt;a href=&#34;https://en.wikipedia.org/wiki/Dijkstra%27s_algorithm&#34;&gt;Wikipedia&amp;rsquo;s page&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;priority-queue&#34;&gt;Priority Queue&lt;/h2&gt;

&lt;p&gt;A priority queue plays a primary role on the Dijkstra&amp;rsquo;s algorithm. The queue should hold a list of unvisited nodes ordered by a minimum cost to arrive a node. Thanks to Redis, &lt;a href=&#34;http://redis.io/topics/data-types#sorted-sets&#34;&gt;sorted-sets&lt;/a&gt; can be used for this; a member and its score correspond to an unvisited node and the minimum cost of it respectively. &lt;strong&gt;Shift&lt;/strong&gt; and &lt;strong&gt;push&lt;/strong&gt; operations to this priority queue could be implemented like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #002b36&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #586e75; font-style: italic&#34;&gt;-- dijkstra.lua:1&lt;/span&gt;
&lt;span style=&#34;color: #859900&#34;&gt;local&lt;/span&gt; &lt;span style=&#34;color: #859900&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color: #268bd2&#34;&gt;zshift&lt;/span&gt;&lt;span style=&#34;color: #839496&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #93a1a1&#34;&gt;key&lt;/span&gt;&lt;span style=&#34;color: #839496&#34;&gt;)&lt;/span&gt;
   &lt;span style=&#34;color: #859900&#34;&gt;local&lt;/span&gt; &lt;span style=&#34;color: #93a1a1&#34;&gt;res&lt;/span&gt; &lt;span style=&#34;color: #839496&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #93a1a1&#34;&gt;redis&lt;/span&gt;&lt;span style=&#34;color: #839496&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #93a1a1&#34;&gt;call&lt;/span&gt;&lt;span style=&#34;color: #839496&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #2aa198&#34;&gt;&amp;#39;ZRANGE&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #839496&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #93a1a1&#34;&gt;key&lt;/span&gt;&lt;span style=&#34;color: #839496&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #2aa198&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #839496&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #2aa198&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #839496&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #2aa198&#34;&gt;&amp;#39;WITHSCORES&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #839496&#34;&gt;)&lt;/span&gt;
   &lt;span style=&#34;color: #93a1a1&#34;&gt;redis&lt;/span&gt;&lt;span style=&#34;color: #839496&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #93a1a1&#34;&gt;call&lt;/span&gt;&lt;span style=&#34;color: #839496&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #2aa198&#34;&gt;&amp;#39;ZREMRANGEBYRANK&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #839496&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #93a1a1&#34;&gt;key&lt;/span&gt;&lt;span style=&#34;color: #839496&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #2aa198&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #839496&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #2aa198&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #839496&#34;&gt;)&lt;/span&gt;
   &lt;span style=&#34;color: #859900&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #93a1a1&#34;&gt;res&lt;/span&gt;&lt;span style=&#34;color: #839496&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #2aa198&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #839496&#34;&gt;],&lt;/span&gt; &lt;span style=&#34;color: #93a1a1&#34;&gt;res&lt;/span&gt;&lt;span style=&#34;color: #839496&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #2aa198&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color: #839496&#34;&gt;]&lt;/span&gt;
&lt;span style=&#34;color: #859900&#34;&gt;end&lt;/span&gt;

&lt;span style=&#34;color: #859900&#34;&gt;local&lt;/span&gt; &lt;span style=&#34;color: #859900&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color: #268bd2&#34;&gt;zaddlt&lt;/span&gt;&lt;span style=&#34;color: #839496&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #93a1a1&#34;&gt;key&lt;/span&gt;&lt;span style=&#34;color: #839496&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #93a1a1&#34;&gt;score&lt;/span&gt;&lt;span style=&#34;color: #839496&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #93a1a1&#34;&gt;member&lt;/span&gt;&lt;span style=&#34;color: #839496&#34;&gt;)&lt;/span&gt;
   &lt;span style=&#34;color: #859900&#34;&gt;local&lt;/span&gt; &lt;span style=&#34;color: #93a1a1&#34;&gt;s&lt;/span&gt; &lt;span style=&#34;color: #839496&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #93a1a1&#34;&gt;redis&lt;/span&gt;&lt;span style=&#34;color: #839496&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #93a1a1&#34;&gt;call&lt;/span&gt;&lt;span style=&#34;color: #839496&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #2aa198&#34;&gt;&amp;#39;ZSCORE&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #839496&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #93a1a1&#34;&gt;key&lt;/span&gt;&lt;span style=&#34;color: #839496&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #93a1a1&#34;&gt;member&lt;/span&gt;&lt;span style=&#34;color: #839496&#34;&gt;)&lt;/span&gt;
   &lt;span style=&#34;color: #859900&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #859900&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color: #93a1a1&#34;&gt;s&lt;/span&gt; &lt;span style=&#34;color: #859900&#34;&gt;or&lt;/span&gt; &lt;span style=&#34;color: #93a1a1&#34;&gt;s&lt;/span&gt;&lt;span style=&#34;color: #839496&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color: #2aa198&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color: #839496&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #93a1a1&#34;&gt;score&lt;/span&gt; &lt;span style=&#34;color: #859900&#34;&gt;then&lt;/span&gt;
      &lt;span style=&#34;color: #93a1a1&#34;&gt;redis&lt;/span&gt;&lt;span style=&#34;color: #839496&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #93a1a1&#34;&gt;call&lt;/span&gt;&lt;span style=&#34;color: #839496&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #2aa198&#34;&gt;&amp;#39;ZADD&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #839496&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #93a1a1&#34;&gt;key&lt;/span&gt;&lt;span style=&#34;color: #839496&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #93a1a1&#34;&gt;score&lt;/span&gt;&lt;span style=&#34;color: #839496&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #93a1a1&#34;&gt;member&lt;/span&gt;&lt;span style=&#34;color: #839496&#34;&gt;)&lt;/span&gt;
   &lt;span style=&#34;color: #859900&#34;&gt;end&lt;/span&gt;
&lt;span style=&#34;color: #859900&#34;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The shift function retrieves the node with lowest score, i.e., lowest cost, by &lt;strong&gt;ZRANGE&lt;/strong&gt;, then removes the entry by &lt;strong&gt;ZREMRANGEBYRANK&lt;/strong&gt; and finally returns the node and its cost. The push operation is bit tricky due to the nature of a sorted-set; no two nodes can exist in the queue at the same time. Hence, a node and its associated cost should be added only if the cost is less than the one already existed in the queue. This is implemented as &lt;strong&gt;zaddlt&lt;/strong&gt;. The time complexity of &lt;strong&gt;zshift&lt;/strong&gt; and &lt;strong&gt;zaddlt&lt;/strong&gt; is &lt;code&gt;O(log(N))&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;dijkstra-s-algorithm&#34;&gt;Dijkstra&amp;rsquo;s algorithm&lt;/h2&gt;

&lt;p&gt;Here is my implementation of the algorithm with Lua script. Following code is the initialization step.&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #002b36&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #586e75; font-style: italic&#34;&gt;-- dijkstra.lua:18&lt;/span&gt;
&lt;span style=&#34;color: #859900&#34;&gt;local&lt;/span&gt; &lt;span style=&#34;color: #93a1a1&#34;&gt;graph&lt;/span&gt; &lt;span style=&#34;color: #839496&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #93a1a1&#34;&gt;KEYS&lt;/span&gt;&lt;span style=&#34;color: #839496&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #2aa198&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #839496&#34;&gt;]&lt;/span&gt;
&lt;span style=&#34;color: #859900&#34;&gt;local&lt;/span&gt; &lt;span style=&#34;color: #93a1a1&#34;&gt;queue&lt;/span&gt; &lt;span style=&#34;color: #839496&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #93a1a1&#34;&gt;KEYS&lt;/span&gt;&lt;span style=&#34;color: #839496&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #2aa198&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color: #839496&#34;&gt;]&lt;/span&gt;
&lt;span style=&#34;color: #859900&#34;&gt;local&lt;/span&gt; &lt;span style=&#34;color: #93a1a1&#34;&gt;n&lt;/span&gt; &lt;span style=&#34;color: #839496&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #93a1a1&#34;&gt;ARGV&lt;/span&gt;&lt;span style=&#34;color: #839496&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #2aa198&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #839496&#34;&gt;]&lt;/span&gt;
&lt;span style=&#34;color: #859900&#34;&gt;local&lt;/span&gt; &lt;span style=&#34;color: #93a1a1&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color: #839496&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #93a1a1&#34;&gt;ARGV&lt;/span&gt;&lt;span style=&#34;color: #839496&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #2aa198&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color: #839496&#34;&gt;]&lt;/span&gt;
&lt;span style=&#34;color: #859900&#34;&gt;local&lt;/span&gt; &lt;span style=&#34;color: #93a1a1&#34;&gt;to&lt;/span&gt; &lt;span style=&#34;color: #839496&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #93a1a1&#34;&gt;ARGV&lt;/span&gt;&lt;span style=&#34;color: #839496&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #2aa198&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color: #839496&#34;&gt;]&lt;/span&gt;

&lt;span style=&#34;color: #859900&#34;&gt;local&lt;/span&gt; &lt;span style=&#34;color: #93a1a1&#34;&gt;visited&lt;/span&gt; &lt;span style=&#34;color: #839496&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #839496&#34;&gt;{}&lt;/span&gt;
&lt;span style=&#34;color: #859900&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color: #93a1a1&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color: #839496&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #2aa198&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #839496&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #93a1a1&#34;&gt;n&lt;/span&gt; &lt;span style=&#34;color: #859900&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color: #93a1a1&#34;&gt;visited&lt;/span&gt;&lt;span style=&#34;color: #839496&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #93a1a1&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color: #839496&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color: #839496&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #859900&#34;&gt;false&lt;/span&gt; &lt;span style=&#34;color: #859900&#34;&gt;end&lt;/span&gt;

&lt;span style=&#34;color: #93a1a1&#34;&gt;redis&lt;/span&gt;&lt;span style=&#34;color: #839496&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #93a1a1&#34;&gt;call&lt;/span&gt;&lt;span style=&#34;color: #839496&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #2aa198&#34;&gt;&amp;#39;DEL&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #839496&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #93a1a1&#34;&gt;queue&lt;/span&gt;&lt;span style=&#34;color: #839496&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color: #93a1a1&#34;&gt;redis&lt;/span&gt;&lt;span style=&#34;color: #839496&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #93a1a1&#34;&gt;call&lt;/span&gt;&lt;span style=&#34;color: #839496&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #2aa198&#34;&gt;&amp;#39;ZADD&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #839496&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #93a1a1&#34;&gt;queue&lt;/span&gt;&lt;span style=&#34;color: #839496&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #2aa198&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #839496&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #93a1a1&#34;&gt;from&lt;/span&gt;&lt;span style=&#34;color: #839496&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;First, it assigns command line arguments to local variables mostly for clarification. My Lua script takes two keys for accessing graph edges and the priority queue, and three extra arguments: the number of nodes, source and destination nodes. A Lua&amp;rsquo;s table &lt;strong&gt;visited&lt;/strong&gt; is instantiated to look up which node is already visited. In lines 27 and 28, it clears the queue and pushes the first node with cost zero.
The main part of the algorithm is:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #002b36&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #586e75; font-style: italic&#34;&gt;-- dijkstra.lua:29&lt;/span&gt;
&lt;span style=&#34;color: #859900&#34;&gt;local&lt;/span&gt; &lt;span style=&#34;color: #93a1a1&#34;&gt;cur&lt;/span&gt;&lt;span style=&#34;color: #839496&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #93a1a1&#34;&gt;total&lt;/span&gt; &lt;span style=&#34;color: #839496&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #93a1a1&#34;&gt;zshift&lt;/span&gt;&lt;span style=&#34;color: #839496&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #93a1a1&#34;&gt;queue&lt;/span&gt;&lt;span style=&#34;color: #839496&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color: #859900&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color: #93a1a1&#34;&gt;cur&lt;/span&gt; &lt;span style=&#34;color: #859900&#34;&gt;do&lt;/span&gt;
   &lt;span style=&#34;color: #93a1a1&#34;&gt;visited&lt;/span&gt;&lt;span style=&#34;color: #839496&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #93a1a1&#34;&gt;cur&lt;/span&gt;&lt;span style=&#34;color: #839496&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color: #2aa198&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #839496&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color: #839496&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #859900&#34;&gt;true&lt;/span&gt;
   &lt;span style=&#34;color: #859900&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #93a1a1&#34;&gt;cur&lt;/span&gt; &lt;span style=&#34;color: #839496&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #93a1a1&#34;&gt;to&lt;/span&gt; &lt;span style=&#34;color: #859900&#34;&gt;then&lt;/span&gt; &lt;span style=&#34;color: #859900&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #93a1a1&#34;&gt;total&lt;/span&gt; &lt;span style=&#34;color: #859900&#34;&gt;end&lt;/span&gt;

   &lt;span style=&#34;color: #859900&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color: #93a1a1&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color: #839496&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #2aa198&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #839496&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #93a1a1&#34;&gt;n&lt;/span&gt;&lt;span style=&#34;color: #839496&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #2aa198&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color: #859900&#34;&gt;do&lt;/span&gt;
      &lt;span style=&#34;color: #859900&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #859900&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color: #93a1a1&#34;&gt;visited&lt;/span&gt;&lt;span style=&#34;color: #839496&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #93a1a1&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color: #839496&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color: #2aa198&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #839496&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color: #859900&#34;&gt;then&lt;/span&gt;
         &lt;span style=&#34;color: #859900&#34;&gt;local&lt;/span&gt; &lt;span style=&#34;color: #93a1a1&#34;&gt;cost&lt;/span&gt; &lt;span style=&#34;color: #839496&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #93a1a1&#34;&gt;getcost&lt;/span&gt;&lt;span style=&#34;color: #839496&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #93a1a1&#34;&gt;graph&lt;/span&gt;&lt;span style=&#34;color: #839496&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #93a1a1&#34;&gt;n&lt;/span&gt;&lt;span style=&#34;color: #839496&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #93a1a1&#34;&gt;cur&lt;/span&gt;&lt;span style=&#34;color: #839496&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #93a1a1&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color: #839496&#34;&gt;)&lt;/span&gt;
         &lt;span style=&#34;color: #859900&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #93a1a1&#34;&gt;cost&lt;/span&gt; &lt;span style=&#34;color: #859900&#34;&gt;and&lt;/span&gt; &lt;span style=&#34;color: #93a1a1&#34;&gt;cost&lt;/span&gt;&lt;span style=&#34;color: #839496&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color: #2aa198&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color: #839496&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #2aa198&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color: #859900&#34;&gt;then&lt;/span&gt; &lt;span style=&#34;color: #93a1a1&#34;&gt;zaddlt&lt;/span&gt;&lt;span style=&#34;color: #839496&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #93a1a1&#34;&gt;queue&lt;/span&gt;&lt;span style=&#34;color: #839496&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #93a1a1&#34;&gt;total&lt;/span&gt;&lt;span style=&#34;color: #839496&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color: #93a1a1&#34;&gt;cost&lt;/span&gt;&lt;span style=&#34;color: #839496&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #93a1a1&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color: #839496&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #859900&#34;&gt;end&lt;/span&gt;
      &lt;span style=&#34;color: #859900&#34;&gt;end&lt;/span&gt;
   &lt;span style=&#34;color: #859900&#34;&gt;end&lt;/span&gt;

   &lt;span style=&#34;color: #93a1a1&#34;&gt;cur&lt;/span&gt;&lt;span style=&#34;color: #839496&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #93a1a1&#34;&gt;total&lt;/span&gt; &lt;span style=&#34;color: #839496&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #93a1a1&#34;&gt;zshift&lt;/span&gt;&lt;span style=&#34;color: #839496&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #93a1a1&#34;&gt;queue&lt;/span&gt;&lt;span style=&#34;color: #839496&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color: #859900&#34;&gt;end&lt;/span&gt;

&lt;span style=&#34;color: #859900&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #859900&#34;&gt;nil&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;where the &lt;strong&gt;getcost&lt;/strong&gt; function get a cost of edge from &lt;strong&gt;from&lt;/strong&gt; to &lt;strong&gt;to&lt;/strong&gt; nodes which is set by &lt;strong&gt;add_edge.lua&lt;/strong&gt; script explained on &lt;a href=&#34;https://saidie.github.io/post/dijkstra_algorithm_by_redis_and_lua_part1&#34;&gt;the previous post&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #002b36&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #586e75; font-style: italic&#34;&gt;-- dijkstra.lua:14&lt;/span&gt;
&lt;span style=&#34;color: #859900&#34;&gt;local&lt;/span&gt; &lt;span style=&#34;color: #859900&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color: #268bd2&#34;&gt;getcost&lt;/span&gt;&lt;span style=&#34;color: #839496&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #93a1a1&#34;&gt;key&lt;/span&gt;&lt;span style=&#34;color: #839496&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #93a1a1&#34;&gt;nnode&lt;/span&gt;&lt;span style=&#34;color: #839496&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #93a1a1&#34;&gt;from&lt;/span&gt;&lt;span style=&#34;color: #839496&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #93a1a1&#34;&gt;to&lt;/span&gt;&lt;span style=&#34;color: #839496&#34;&gt;)&lt;/span&gt;
   &lt;span style=&#34;color: #859900&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #93a1a1&#34;&gt;redis&lt;/span&gt;&lt;span style=&#34;color: #839496&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #93a1a1&#34;&gt;call&lt;/span&gt;&lt;span style=&#34;color: #839496&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #2aa198&#34;&gt;&amp;#39;HGET&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #839496&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #93a1a1&#34;&gt;key&lt;/span&gt;&lt;span style=&#34;color: #839496&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #93a1a1&#34;&gt;nnode&lt;/span&gt;&lt;span style=&#34;color: #839496&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #93a1a1&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color: #839496&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #93a1a1&#34;&gt;to&lt;/span&gt;&lt;span style=&#34;color: #839496&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color: #859900&#34;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&#34;result&#34;&gt;Result&lt;/h2&gt;

&lt;p&gt;Here, some example problems are solved by above code.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://saidie.github.io/image/dijkstra_algorithm_by_redis_and_lua_part2/graph.png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;First is to find the minimum cost from node &lt;strong&gt;0&lt;/strong&gt; to node &lt;strong&gt;4&lt;/strong&gt; on above graph. You could find that the minimum cost becomes &lt;strong&gt;5&lt;/strong&gt;. My script also answers correctly:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #002b36&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;% redis-cli EVAL &lt;span style=&#34;color: #2aa198&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #859900&#34;&gt;$(&lt;/span&gt;cat add_edge.lua&lt;span style=&#34;color: #859900&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color: #2aa198&#34;&gt;&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #2aa198&#34;&gt;1&lt;/span&gt; graph &lt;span style=&#34;color: #cb4b16&#34;&gt;\&lt;/span&gt;
        &lt;span style=&#34;color: #2aa198&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color: #2aa198&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color: #2aa198&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color: #2aa198&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color: #2aa198&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color: #2aa198&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color: #2aa198&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color: #2aa198&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color: #2aa198&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color: #2aa198&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color: #2aa198&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color: #2aa198&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color: #2aa198&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color: #2aa198&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color: #2aa198&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color: #2aa198&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color: #2aa198&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color: #2aa198&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color: #2aa198&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color: #2aa198&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color: #2aa198&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color: #2aa198&#34;&gt;1&lt;/span&gt;
&lt;span style=&#34;color: #839496&#34;&gt;(&lt;/span&gt;nil&lt;span style=&#34;color: #839496&#34;&gt;)&lt;/span&gt;
% redis-cli EVAL &lt;span style=&#34;color: #2aa198&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #859900&#34;&gt;$(&lt;/span&gt;cat dijkstra.lua&lt;span style=&#34;color: #859900&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color: #2aa198&#34;&gt;&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #2aa198&#34;&gt;2&lt;/span&gt; graph queue &lt;span style=&#34;color: #2aa198&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color: #2aa198&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color: #2aa198&#34;&gt;4&lt;/span&gt;
&lt;span style=&#34;color: #2aa198&#34;&gt;&amp;quot;5&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Good! But it can happen by chance since the graph is quite simple. So, I tested it by solving &lt;a href=&#34;https://projecteuler.net/problem=83&#34;&gt;a Project Euler&amp;rsquo;s problem&lt;/a&gt;. Although I would not describe how to convert the problem to a shortest path problem, a resulting graph has 6,400 nodes and my script can calculate the correct answer to this problem, too.&lt;/p&gt;

&lt;p&gt;However, my script is quite slow and takes about 19 seconds to solve the problem. On the other hand, my C++ implementation finishes instantly. I have not yet investigated the bottleneck of my code but I suspect that the loops in Lua are slow. Besides, my script has another bad point that is monolithic and occupies the Redis execution thread. It would be better to implement main algorithm part at client side for performance and granularity of execution. Anyway, it has been fun to pack a whole algorithm into Redis.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Dijkstra&#39;s algorithm by Redis and Lua (1 of 2)</title>
      <link>https://saidie.github.io/post/dijkstra_algorithm_by_redis_and_lua_part1/</link>
      <pubDate>Mon, 21 Dec 2015 01:44:09 +0900</pubDate>
      
      <guid>https://saidie.github.io/post/dijkstra_algorithm_by_redis_and_lua_part1/</guid>
      <description>

&lt;p&gt;Redis provides several kind of data structures and many functions to manipulate those data. But sometimes additional function is required for satisfying some demand.&lt;/p&gt;

&lt;h2 id=&#34;the-power-of-lua&#34;&gt;The power of Lua&lt;/h2&gt;

&lt;p&gt;For example, you may need to delete a string only when the string is equal to a specified one but there is no such function. Although this is easy to implement by checking the equality of &lt;strong&gt;GET&lt;/strong&gt;-ed string in client-side program and executing &lt;strong&gt;DEL&lt;/strong&gt; command if necessary, it is difficult to make sure that this operation is atomic and you also have to implement a remote locking mechanism. Fortunately, this problem is easily solve because Redis has a great flexibility to extend its function by built-in Lua interpreter. &lt;strong&gt;EVAL&lt;/strong&gt; and &lt;strong&gt;EVALSHA&lt;/strong&gt; commands evaluate a Lua script atomically and you can execute Redis commands inside Lua script.&lt;/p&gt;

&lt;p&gt;Above function is implemented like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #002b36&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #586e75; font-style: italic&#34;&gt;-- deleq.lua&lt;/span&gt;
&lt;span style=&#34;color: #859900&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #93a1a1&#34;&gt;redis&lt;/span&gt;&lt;span style=&#34;color: #839496&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #93a1a1&#34;&gt;call&lt;/span&gt;&lt;span style=&#34;color: #839496&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #2aa198&#34;&gt;&amp;#39;GET&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #839496&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #93a1a1&#34;&gt;KEYS&lt;/span&gt;&lt;span style=&#34;color: #839496&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #2aa198&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #839496&#34;&gt;])&lt;/span&gt; &lt;span style=&#34;color: #839496&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #93a1a1&#34;&gt;ARGV&lt;/span&gt;&lt;span style=&#34;color: #839496&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #2aa198&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #839496&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color: #859900&#34;&gt;then&lt;/span&gt;
  &lt;span style=&#34;color: #859900&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #93a1a1&#34;&gt;redis&lt;/span&gt;&lt;span style=&#34;color: #839496&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #93a1a1&#34;&gt;call&lt;/span&gt;&lt;span style=&#34;color: #839496&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #2aa198&#34;&gt;&amp;#39;DEL&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #839496&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #93a1a1&#34;&gt;KEYS&lt;/span&gt;&lt;span style=&#34;color: #839496&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #2aa198&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #839496&#34;&gt;])&lt;/span&gt;
&lt;span style=&#34;color: #859900&#34;&gt;else&lt;/span&gt;
  &lt;span style=&#34;color: #859900&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #859900&#34;&gt;nil&lt;/span&gt;
&lt;span style=&#34;color: #859900&#34;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here is an example to delete &lt;em&gt;mykey&lt;/em&gt; if its value is equal to &lt;em&gt;&amp;ldquo;Redis&amp;rdquo;&lt;/em&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #002b36&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;% redis-cli SET mykey Redis
OK

% redis-cli EVAL &lt;span style=&#34;color: #2aa198&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #859900&#34;&gt;$(&lt;/span&gt;cat deleq.lua&lt;span style=&#34;color: #859900&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color: #2aa198&#34;&gt;&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #2aa198&#34;&gt;1&lt;/span&gt; mykey Redis
&lt;span style=&#34;color: #839496&#34;&gt;(&lt;/span&gt;integer&lt;span style=&#34;color: #839496&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #2aa198&#34;&gt;1&lt;/span&gt;  &lt;span style=&#34;color: #586e75; font-style: italic&#34;&gt;# deleted !!&lt;/span&gt;

% redis-cli SET mykey redis
OK

% redis-cli EVAL &lt;span style=&#34;color: #2aa198&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #859900&#34;&gt;$(&lt;/span&gt;cat deleq.lua&lt;span style=&#34;color: #859900&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color: #2aa198&#34;&gt;&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #2aa198&#34;&gt;1&lt;/span&gt; mykey Redis
&lt;span style=&#34;color: #839496&#34;&gt;(&lt;/span&gt;nil&lt;span style=&#34;color: #839496&#34;&gt;)&lt;/span&gt;  &lt;span style=&#34;color: #586e75; font-style: italic&#34;&gt;# not deleted&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The detail of Lua script and meanings of arguments for &lt;strong&gt;EVAL&lt;/strong&gt; are not explained in this post. There are already some good articles for learning: &lt;a href=&#34;https://www.redisgreen.net/blog/intro-to-lua-for-redis-programmers/&#34;&gt;Lua: A Guide for Redis Users&lt;/a&gt; is a very good tutorial and &lt;a href=&#34;http://redis.io/commands/EVAL&#34;&gt;document of &lt;strong&gt;EVAL&lt;/strong&gt;&lt;/a&gt; provides a wealth of content.&lt;/p&gt;

&lt;h2 id=&#34;constructing-a-directed-graph-with-weighted-edges&#34;&gt;Constructing a directed graph with weighted edges&lt;/h2&gt;

&lt;p&gt;As above, Redis becomes a computational environment rather than data store with the help of Lua. Although there are some restrictions on running Lua script in Redis, there still be a wide range of application.&lt;/p&gt;

&lt;p&gt;As an example, I wil try to implement the Dijkstra&amp;rsquo;s shortest path algorithm. Before implementing the algorithm I need a data structure to represent a directed graph with weighted edges. In some usual programming languages, such a graph can be implemented as a list of lists. We can do similar by having a bunch of Redis&amp;rsquo;s lists but I would like to put everything into a single object. So I pack a node pair into an integer value and associate a weight between the nodes to it. Suppose that nodes of graph are indexed from &lt;em&gt;0&lt;/em&gt; to &lt;em&gt;n-1&lt;/em&gt;, a edge from node &lt;em&gt;i&lt;/em&gt; to node &lt;em&gt;j&lt;/em&gt; can be represnted by &lt;code&gt;i*n + j&lt;/code&gt;. Then, a Lua script to register weighted graphs edges can be implemented like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #002b36&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #586e75; font-style: italic&#34;&gt;-- add_edge.lua&lt;/span&gt;
&lt;span style=&#34;color: #859900&#34;&gt;local&lt;/span&gt; &lt;span style=&#34;color: #859900&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color: #268bd2&#34;&gt;set_weight&lt;/span&gt;&lt;span style=&#34;color: #839496&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #93a1a1&#34;&gt;key&lt;/span&gt;&lt;span style=&#34;color: #839496&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #93a1a1&#34;&gt;n&lt;/span&gt;&lt;span style=&#34;color: #839496&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #93a1a1&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color: #839496&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #93a1a1&#34;&gt;j&lt;/span&gt;&lt;span style=&#34;color: #839496&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #93a1a1&#34;&gt;w&lt;/span&gt;&lt;span style=&#34;color: #839496&#34;&gt;)&lt;/span&gt;
  &lt;span style=&#34;color: #93a1a1&#34;&gt;redis&lt;/span&gt;&lt;span style=&#34;color: #839496&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #93a1a1&#34;&gt;call&lt;/span&gt;&lt;span style=&#34;color: #839496&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #2aa198&#34;&gt;&amp;#39;HSET&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #839496&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #93a1a1&#34;&gt;key&lt;/span&gt;&lt;span style=&#34;color: #839496&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #93a1a1&#34;&gt;n&lt;/span&gt;&lt;span style=&#34;color: #839496&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #93a1a1&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color: #839496&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #93a1a1&#34;&gt;j&lt;/span&gt;&lt;span style=&#34;color: #839496&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #93a1a1&#34;&gt;w&lt;/span&gt;&lt;span style=&#34;color: #839496&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color: #859900&#34;&gt;end&lt;/span&gt;

&lt;span style=&#34;color: #859900&#34;&gt;local&lt;/span&gt; &lt;span style=&#34;color: #93a1a1&#34;&gt;n&lt;/span&gt; &lt;span style=&#34;color: #839496&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #93a1a1&#34;&gt;ARGV&lt;/span&gt;&lt;span style=&#34;color: #839496&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #2aa198&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #839496&#34;&gt;]&lt;/span&gt;
&lt;span style=&#34;color: #859900&#34;&gt;local&lt;/span&gt; &lt;span style=&#34;color: #93a1a1&#34;&gt;argc&lt;/span&gt; &lt;span style=&#34;color: #839496&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #93a1a1&#34;&gt;table&lt;/span&gt;&lt;span style=&#34;color: #839496&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #93a1a1&#34;&gt;getn&lt;/span&gt;&lt;span style=&#34;color: #839496&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #93a1a1&#34;&gt;ARGV&lt;/span&gt;&lt;span style=&#34;color: #839496&#34;&gt;)&lt;/span&gt;

&lt;span style=&#34;color: #859900&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color: #93a1a1&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color: #839496&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #2aa198&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color: #839496&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #93a1a1&#34;&gt;argc&lt;/span&gt;&lt;span style=&#34;color: #839496&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #2aa198&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color: #859900&#34;&gt;do&lt;/span&gt;
  &lt;span style=&#34;color: #93a1a1&#34;&gt;set_weight&lt;/span&gt;&lt;span style=&#34;color: #839496&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #93a1a1&#34;&gt;KEYS&lt;/span&gt;&lt;span style=&#34;color: #839496&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #2aa198&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #839496&#34;&gt;],&lt;/span&gt; &lt;span style=&#34;color: #93a1a1&#34;&gt;n&lt;/span&gt;&lt;span style=&#34;color: #839496&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #93a1a1&#34;&gt;ARGV&lt;/span&gt;&lt;span style=&#34;color: #839496&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #93a1a1&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color: #839496&#34;&gt;],&lt;/span&gt; &lt;span style=&#34;color: #93a1a1&#34;&gt;ARGV&lt;/span&gt;&lt;span style=&#34;color: #839496&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #93a1a1&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color: #839496&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color: #2aa198&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #839496&#34;&gt;],&lt;/span&gt; &lt;span style=&#34;color: #93a1a1&#34;&gt;ARGV&lt;/span&gt;&lt;span style=&#34;color: #839496&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #93a1a1&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color: #839496&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color: #2aa198&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color: #839496&#34;&gt;])&lt;/span&gt;
&lt;span style=&#34;color: #859900&#34;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This script takes a Redis key for storing information of edges, number of nodes and some edge triples in which each consists of source node index, destination node index and weight of the edge.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://saidie.github.io/image/dijkstra_algorithm_by_redis_and_lua_part1/graph.png&#34; alt=&#34;Graph&#34; /&gt;&lt;/p&gt;

&lt;p&gt;For instance, above graph can be stored by following command.&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #002b36&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;% redis-cli EVAL &lt;span style=&#34;color: #2aa198&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #859900&#34;&gt;$(&lt;/span&gt;cat add_edge.lua&lt;span style=&#34;color: #859900&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color: #2aa198&#34;&gt;&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #2aa198&#34;&gt;1&lt;/span&gt; graph &lt;span style=&#34;color: #cb4b16&#34;&gt;\&lt;/span&gt;
        &lt;span style=&#34;color: #2aa198&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color: #2aa198&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color: #2aa198&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color: #2aa198&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color: #2aa198&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color: #2aa198&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color: #2aa198&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color: #2aa198&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color: #2aa198&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color: #2aa198&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color: #2aa198&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color: #2aa198&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color: #2aa198&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color: #2aa198&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color: #2aa198&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color: #2aa198&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color: #2aa198&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color: #2aa198&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color: #2aa198&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color: #2aa198&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color: #2aa198&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color: #2aa198&#34;&gt;1&lt;/span&gt;

% redis-cli HGETALL graph
&lt;span style=&#34;color: #2aa198&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #839496&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #2aa198&#34;&gt;&amp;quot;1&amp;quot;&lt;/span&gt;
&lt;span style=&#34;color: #2aa198&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color: #839496&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #2aa198&#34;&gt;&amp;quot;2&amp;quot;&lt;/span&gt;
&lt;span style=&#34;color: #2aa198&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color: #839496&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #2aa198&#34;&gt;&amp;quot;2&amp;quot;&lt;/span&gt;
&lt;span style=&#34;color: #2aa198&#34;&gt;4&lt;/span&gt;&lt;span style=&#34;color: #839496&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #2aa198&#34;&gt;&amp;quot;3&amp;quot;&lt;/span&gt;
&lt;span style=&#34;color: #2aa198&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color: #839496&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #2aa198&#34;&gt;&amp;quot;8&amp;quot;&lt;/span&gt;
&lt;span style=&#34;color: #2aa198&#34;&gt;6&lt;/span&gt;&lt;span style=&#34;color: #839496&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #2aa198&#34;&gt;&amp;quot;4&amp;quot;&lt;/span&gt;
&lt;span style=&#34;color: #2aa198&#34;&gt;7&lt;/span&gt;&lt;span style=&#34;color: #839496&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #2aa198&#34;&gt;&amp;quot;9&amp;quot;&lt;/span&gt;
&lt;span style=&#34;color: #2aa198&#34;&gt;8&lt;/span&gt;&lt;span style=&#34;color: #839496&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #2aa198&#34;&gt;&amp;quot;5&amp;quot;&lt;/span&gt;
&lt;span style=&#34;color: #2aa198&#34;&gt;9&lt;/span&gt;&lt;span style=&#34;color: #839496&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #2aa198&#34;&gt;&amp;quot;13&amp;quot;&lt;/span&gt;
&lt;span style=&#34;color: #2aa198&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color: #839496&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #2aa198&#34;&gt;&amp;quot;1&amp;quot;&lt;/span&gt;
&lt;span style=&#34;color: #2aa198&#34;&gt;11&lt;/span&gt;&lt;span style=&#34;color: #839496&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #2aa198&#34;&gt;&amp;quot;14&amp;quot;&lt;/span&gt;
&lt;span style=&#34;color: #2aa198&#34;&gt;12&lt;/span&gt;&lt;span style=&#34;color: #839496&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #2aa198&#34;&gt;&amp;quot;3&amp;quot;&lt;/span&gt;
&lt;span style=&#34;color: #2aa198&#34;&gt;13&lt;/span&gt;&lt;span style=&#34;color: #839496&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #2aa198&#34;&gt;&amp;quot;19&amp;quot;&lt;/span&gt;
&lt;span style=&#34;color: #2aa198&#34;&gt;14&lt;/span&gt;&lt;span style=&#34;color: #839496&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #2aa198&#34;&gt;&amp;quot;1&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In the next post, I will implement the Dijkstra&amp;rsquo;s algorithm over this graph data structure!&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>