<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Redis on saidie&#39;s log</title>
    <link>https://saidie.github.io/tags/redis/</link>
    <description>Recent content in Redis on saidie&#39;s log</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>Hiroshi Saito &amp;copy; 2016. All rights reserved.</copyright>
    <lastBuildDate>Wed, 01 Mar 2017 14:32:00 +0900</lastBuildDate>
    
	<atom:link href="https://saidie.github.io/tags/redis/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Introduction to Renoir</title>
      <link>https://saidie.github.io/post/introduction_to_renoir/</link>
      <pubDate>Wed, 01 Mar 2017 14:32:00 +0900</pubDate>
      
      <guid>https://saidie.github.io/post/introduction_to_renoir/</guid>
      <description>About a month ago, I released a &amp;ldquo;production ready&amp;rdquo; Redis cluster client library for Ruby. It is named Renoir and was pushed to rubygems.org: https://rubygems.org/gems/renoir.
It was surprising that there had been no reliable Redis Cluster client library for Ruby in spite of the fact that Redis 3.0 had been released about two years ago. In fact, there exist several implementations but their README always say like &amp;ldquo;this library is not yet production ready.</description>
    </item>
    
    <item>
      <title>Dijkstra&#39;s algorithm by Redis and Lua (2 of 2)</title>
      <link>https://saidie.github.io/post/dijkstra_algorithm_by_redis_and_lua_part2/</link>
      <pubDate>Tue, 29 Dec 2015 01:30:53 +0900</pubDate>
      
      <guid>https://saidie.github.io/post/dijkstra_algorithm_by_redis_and_lua_part2/</guid>
      <description>In the previous post, a brief description about running Lua script on Redis and a code snippet to add a graph edge to a hash are given. In this post, an implementation of the Dijkstra&amp;rsquo;s shortest path algorithm is explained. I will not explain the algorithm itself since there are already so many articles explaining about it, e.g., Wikipedia&amp;rsquo;s page.
Priority Queue A priority queue plays a primary role on the Dijkstra&amp;rsquo;s algorithm.</description>
    </item>
    
    <item>
      <title>Dijkstra&#39;s algorithm by Redis and Lua (1 of 2)</title>
      <link>https://saidie.github.io/post/dijkstra_algorithm_by_redis_and_lua_part1/</link>
      <pubDate>Mon, 21 Dec 2015 01:44:09 +0900</pubDate>
      
      <guid>https://saidie.github.io/post/dijkstra_algorithm_by_redis_and_lua_part1/</guid>
      <description>Redis provides several kind of data structures and many functions to manipulate those data. But sometimes additional function is required for satisfying some demand.
The power of Lua For example, you may need to delete a string only when the string is equal to a specified one but there is no such function. Although this is easy to implement by checking the equality of GET-ed string in client-side program and executing DEL command if necessary, it is difficult to make sure that this operation is atomic and you also have to implement a remote locking mechanism.</description>
    </item>
    
    <item>
      <title>Redis code reading: sds</title>
      <link>https://saidie.github.io/post/redis_code_reading_sds/</link>
      <pubDate>Mon, 07 Dec 2015 08:31:29 +0900</pubDate>
      
      <guid>https://saidie.github.io/post/redis_code_reading_sds/</guid>
      <description>Last weekend, I read and summarized zmalloc.c which provides basic memory allocation mechanisms of Redis. In this weekend, I explored sds.c which implements many functions to manage a dynamic string efficiently; in fact, &amp;ldquo;sds&amp;rdquo; stands for Simple Dynamic String. This post describes a core of sds implementations. The version of Redis is 3.0.5. I put some comments on following code snippets.
sds is just a char pointer with hidden header As well as zmalloc family, sds implicitly keeps track of available size and length of string by placing them on its (hidden) prefix.</description>
    </item>
    
    <item>
      <title>Redis code reading: zmalloc</title>
      <link>https://saidie.github.io/post/redis_code_reading_zmalloc/</link>
      <pubDate>Sun, 29 Nov 2015 23:08:35 +0900</pubDate>
      
      <guid>https://saidie.github.io/post/redis_code_reading_zmalloc/</guid>
      <description>This post explains some fundamental functions of memory allocation used in Redis. These functions are kind of wrapper to hide architecture-dependent implementations and to keep track of the size of total allocated memory. The version of Redis is 3.0.5.
Available Backend Implementations A backend memory allocator of zmalloc can be one of the following:
 libc malloc  Default except Linux.  jemmaloc  http://www.canonware.com/jemalloc/ It seems less fragmentation than libc malloc.</description>
    </item>
    
    <item>
      <title>Visualize rough Redis source code dependencies</title>
      <link>https://saidie.github.io/post/visualize_redis_source_code_dependencies/</link>
      <pubDate>Sun, 22 Nov 2015 15:17:55 +0900</pubDate>
      
      <guid>https://saidie.github.io/post/visualize_redis_source_code_dependencies/</guid>
      <description>Now, I&amp;rsquo;m getting interested in Redis. The concept of Redis seems to be different from other general purpose database like relational, document, graph databases; each of these employs a one-size-fits-all data model. By no free lunch theorem, these databases cannot store and fetch some kind of data efficiently. Some of this data can be efficiently handled by Redis since it provides specialized and primitive data structures. This specialty attracts me.</description>
    </item>
    
  </channel>
</rss>